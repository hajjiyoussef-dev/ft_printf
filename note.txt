

syntax of printf -> printf ( "formatted_string", arguments_list); 

PARMETERS -> 

formatted_string -> it the string the specifies the data to be printed  
arguments_list -> these are the variables names corresponding to the format specifier 


the return value -> the printf function is return  the number of characters printed after 
successful execution end if in error happend it return (-1); 

thr formatting in c printf can be in type (characters , integer, float, ...)

syntax of format specifier -> %[flags][width][.precision][length]specifier (%d,%c,%s,%p,%x ....)

the  conversions that me printf do ->

• %c Prints a single character.
• %s Prints a string (as defined by the common C convention).
• %p The void * pointer argument has to be printed in hexadecimal format.
• %d Prints a decimal (base 10) number.
• %i Prints an integer in base 10.
• %u Prints an unsigned decimal (base 10) number.
• %x Prints a number in hexadecimal (base 16) lowercase format.
• %X Prints a number in hexadecimal (base 16) uppercase format.
• %% Prints a percent sign.


-------------------------------------------------------------
Some tests

int main() {
    ft_printf("String: %s\n", "Hello, World!");
    ft_printf("Character: %c\n", 'A');
    ft_printf("Integer: %d\n", 1234);
    ft_printf("Unsigned: %u\n", 1234);
    ft_printf("Hex (lower): %x\n", 255);
    ft_printf("Hex (upper): %X\n", 255);
    ft_printf("Pointer: %p\n", (void *)0x123456);
    ft_printf("Percent: %%\n");

    ft_printf("Null string: %s\n", NULL);
    ft_printf("Zero unsigned: %u\n", 0);
    ft_printf("Negative integer: %d\n", -42);
    ft_printf("Large unsigned: %u\n", 4294967295);// UINT_MAX

      write(1,"\n ",2);
      write(1,"\n ",2);

   printf("String: %s\n", "Hello, World!");
   printf("Character: %c\n", 'A');
   printf("Integer: %d\n", 1234);
   printf("Unsigned: %u\n", 1234);
   printf("Hex (lower): %x\n", 255);
   printf("Hex (upper): %X\n", 255);
   printf("Pointer: %p\n", (void *)0x123456);
   printf("Percent: %%\n");

   printf("Null string: %s\n", NULL);
   printf("Zero unsigned: %u\n", 0);
   printf("Negative integer: %d\n", -42);
   printf("Large unsigned: %u\n", 4294967295);

    return 0;
}